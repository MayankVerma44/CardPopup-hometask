{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MAYANK\\\\cardpayment-implementation-hometask\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport RevolutCheckout from '@revolut/checkout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [orderToken, setOrderToken] = useState('');\n  const [paymentStatus, setPaymentStatus] = useState('');\n\n  // Create an order and get the token\n  const createOrder = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/create-order', {\n        amount: 500,\n        // Example amount in cents (500 = 5 GBP)\n        currency: 'GBP' // Example currency\n      });\n      console.log('Received order token:', response.data.token);\n      setOrderToken(response.data.token); // Save the token from the response\n    } catch (error) {\n      console.error('Error creating order:', error);\n    }\n  };\n\n  // Handle payment with the Revolut Checkout widget\n  const handlePayment = async () => {\n    if (!orderToken) {\n      console.error('No order token available');\n      return;\n    }\n    try {\n      const {\n        payWithPopup\n      } = await RevolutCheckout(orderToken);\n\n      // Open the Revolut payment pop-up\n      payWithPopup({\n        email: 'customer@example.com',\n        // Replace with actual customer email\n        onSuccess: () => {\n          setPaymentStatus('Payment successful!');\n          alert('Payment Successful');\n        },\n        onError: error => {\n          setPaymentStatus('Payment failed');\n          alert(`Payment Failed: ${error}`);\n        }\n      });\n    } catch (error) {\n      console.error('Error initializing payment:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createOrder,\n      children: \"Create Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), orderToken && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePayment,\n        children: \"Pay with Revolut\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), paymentStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: paymentStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"I2F6/gHhSDy5Gf3n7YIbnPPCzP8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","RevolutCheckout","jsxDEV","_jsxDEV","App","_s","orderToken","setOrderToken","paymentStatus","setPaymentStatus","createOrder","response","post","amount","currency","console","log","data","token","error","handlePayment","payWithPopup","email","onSuccess","alert","onError","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/MAYANK/cardpayment-implementation-hometask/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport RevolutCheckout from '@revolut/checkout';\nconst App = () => {\n  const [orderToken, setOrderToken] = useState('');\n  const [paymentStatus, setPaymentStatus] = useState('');\n\n  // Create an order and get the token\n  const createOrder = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/create-order', {\n        amount: 500,    // Example amount in cents (500 = 5 GBP)\n        currency: 'GBP' // Example currency\n      });\n\n      console.log('Received order token:', response.data.token);\n      setOrderToken(response.data.token);  // Save the token from the response\n\n    } catch (error) {\n      console.error('Error creating order:', error);\n    }\n  };\n\n  // Handle payment with the Revolut Checkout widget\n  const handlePayment = async () => {\n    if (!orderToken) {\n      console.error('No order token available');\n      return;\n    }\n\n    try {\n      const { payWithPopup } = await RevolutCheckout(orderToken);\n\n      // Open the Revolut payment pop-up\n      payWithPopup({\n        email: 'customer@example.com',  // Replace with actual customer email\n        onSuccess: () => {\n          setPaymentStatus('Payment successful!');\n          alert('Payment Successful');\n        },\n        onError: (error) => {\n          setPaymentStatus('Payment failed');\n          alert(`Payment Failed: ${error}`);\n        },\n      });\n    } catch (error) {\n      console.error('Error initializing payment:', error);\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={createOrder}>Create Order</button>\n      {orderToken && (\n        <div>\n          <button onClick={handlePayment}>Pay with Revolut</button>\n        </div>\n      )}\n      {paymentStatus && <div>{paymentStatus}</div>}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,eAAe,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEtD;EACA,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,wCAAwC,EAAE;QAC1EC,MAAM,EAAE,GAAG;QAAK;QAChBC,QAAQ,EAAE,KAAK,CAAC;MAClB,CAAC,CAAC;MAEFC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEL,QAAQ,CAACM,IAAI,CAACC,KAAK,CAAC;MACzDX,aAAa,CAACI,QAAQ,CAACM,IAAI,CAACC,KAAK,CAAC,CAAC,CAAE;IAEvC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;;EAED;EACA,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAACd,UAAU,EAAE;MACfS,OAAO,CAACI,KAAK,CAAC,0BAA0B,CAAC;MACzC;IACF;IAEA,IAAI;MACF,MAAM;QAAEE;MAAa,CAAC,GAAG,MAAMpB,eAAe,CAACK,UAAU,CAAC;;MAE1D;MACAe,YAAY,CAAC;QACXC,KAAK,EAAE,sBAAsB;QAAG;QAChCC,SAAS,EAAEA,CAAA,KAAM;UACfd,gBAAgB,CAAC,qBAAqB,CAAC;UACvCe,KAAK,CAAC,oBAAoB,CAAC;QAC7B,CAAC;QACDC,OAAO,EAAGN,KAAK,IAAK;UAClBV,gBAAgB,CAAC,gBAAgB,CAAC;UAClCe,KAAK,CAAC,mBAAmBL,KAAK,EAAE,CAAC;QACnC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;EAED,oBACEhB,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAQwB,OAAO,EAAEjB,WAAY;MAAAgB,QAAA,EAAC;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAClDzB,UAAU,iBACTH,OAAA;MAAAuB,QAAA,eACEvB,OAAA;QAAQwB,OAAO,EAAEP,aAAc;QAAAM,QAAA,EAAC;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CACN,EACAvB,aAAa,iBAAIL,OAAA;MAAAuB,QAAA,EAAMlB;IAAa;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA1DID,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AA4DT,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}